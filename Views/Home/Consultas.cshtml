<!DOCTYPE html>
<html lang="pt-br">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NIST CSF - Consulta de Categorias</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'SegoeUI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            padding: 20px;
            color: #2c3e50;
        }

        .container {
            max-width: 1000px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
        }

        .combo-container {
            margin-bottom: 25px;
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            border-left: 4px solid #d80300;
        }

        h1 {
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.2em;
            font-weight: 600;
            color: #2c3e50;
        }

        .breadcrumb {
            display: flex;
            margin-bottom: 25px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 10px;
            font-size: 1.1em;
        }

        .breadcrumb div {
            margin-right: 10px;
            padding-right: 15px;
            position: relative;
        }

        .breadcrumb div:not(:last-child)::after {
            content: "›";
            position: absolute;
            right: 0;
            color: #7f8c8d;
        }

        .breadcrumb .active {
            font-weight: bold;
            color: #3498db;
        }

        select {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
            background-color: white;
            transition: border-color 0.3s;
        }

        select:focus {
            border-color: #3498db;
            outline: none;
        }

        select:disabled {
            background-color: #f8f9fa;
            color: #6c757d;
            cursor: not-allowed;
        }

        .hidden {
            display: none;
            opacity: 0;
            transform: translateY(-10px);
        }

        .visible {
            display: block;
            animation: fadeIn 0.3s forwards;
        }

        .info-container {
            margin-top: 20px;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: #f5f5f5;
        }

        textarea {
            width: 100%;
            min-height: 150px;
            padding: 10px;
            font-family: Arial, sans-serif;
            font-size: 14px;
            border: 1px solid #ccc;
            border-radius: 4px;
            resize: vertical;
        }

        .loading {
            color: #666;
            font-style: italic;
        }

        .error {
            color: #d80300;
            background: #ffe6e6;
            padding: 10px;
            border-radius: 5px;
            margin-top: 10px;
        }

        keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
    </style>
</head>

<body>
    <div class="container">
        <h1>NIST CSF - Consultas</h1>
        <div class="breadcrumb">
            <div class="active">Função</div>
            <div>Categoria</div>
            <div>Subcategorias</div>
        </div>

        <div class="combo-container">
            <label for="opcoesPrincipais">Selecione uma função:</label>
            <select id="opcoesPrincipais" onchange="carregarCategorias(this.value)" disabled>
                <option value="">Carregando funções...</option>
            </select>
        </div>

        <div id="subOpcoesContainer" class="hidden">
            <div class="combo-container">
                <label for="subOpcoes">Selecione uma categoria:</label>
                <select id="subOpcoes" onchange="carregarSubcategorias(this.value)" disabled>
                    <option value="">Selecione uma categoria</option>
                </select>
            </div>
        </div>

        <div id="subCatContainer" class="hidden">
            <div class="combo-container">
                <label for="subCatOpcoes">Selecione uma Subcategoria:</label>
                <select id="subCatOpcoes" onchange="carregarInformacoes(this.value)" disabled>
                    <option value="">Selecione uma Subcategoria</option>
                </select>
            </div>
        </div>

        <div id="infoContainer" class="hidden">
            <div class="info-container">
                <div class="combo-container">
                    <h3>Informações da Subcategoria:</h3>
                    <textarea id="infoTextarea" readonly></textarea>
                </div>
            </div>
        </div>

        <script>
            // Variáveis globais para armazenar dados
            let funcoesData = [];
            let categoriasData = [];
            let subcategoriasData = [];

            // Inicialização quando a página carrega
            document.addEventListener('DOMContentLoaded', function () {
                carregarFuncoes();
            });

            // Carregar funções do banco
            async function carregarFuncoes() {
                try {
                    console.log('Carregando funções...');
                    const response = await fetch('/api/Funcoes');

                    if (!response.ok) {
                        throw new Error(`Erro ${response.status}: ${response.statusText}`);
                    }

                    const data = await response.json();
                    console.log('Funções carregadas:', data);

                    funcoesData = data;
                    preencherFuncoes();

                } catch (error) {
                    console.error('Erro ao carregar funções:', error);
                    document.getElementById('opcoesPrincipais').innerHTML = '<option value="">Erro ao carregar funções</option>';
                    document.getElementById('opcoesPrincipais').disabled = false;
                }
            }

            // Preencher dropdown de funções
            function preencherFuncoes() {
                const select = document.getElementById('opcoesPrincipais');
                select.innerHTML = '<option value="">Selecione uma função</option>';

                funcoesData.forEach(funcao => {
                    const option = document.createElement('option');
                    // Ajuste baseado na estrutura real da sua tabela SGSI_FUNCOES
                    option.value = funcao.id || funcao.ID;
                    option.textContent = `${funcao.codigo || funcao.CODIGO || ''} - ${funcao.nome || funcao.NOME || funcao.descricao || funcao.DESCRICAO}`;
                    select.appendChild(option);
                });

                select.disabled = false;
                updateBreadcrumb(1);
            }

            // Carregar categorias baseadas na função selecionada
            async function carregarCategorias(funcaoId) {
                const subOpcoesContainer = document.getElementById('subOpcoesContainer');
                const subOpcoesSelect = document.getElementById('subOpcoes');
                const subCatContainer = document.getElementById('subCatContainer');
                const infoContainer = document.getElementById('infoContainer');

                // Limpar seleções anteriores
                subOpcoesSelect.innerHTML = '<option value="">Carregando categorias...</option>';
                subOpcoesSelect.disabled = true;
                subCatContainer.classList.add('hidden');
                infoContainer.classList.add('hidden');

                if (!funcaoId) {
                    subOpcoesContainer.classList.add('hidden');
                    updateBreadcrumb(1);
                    return;
                }

                try {
                    console.log(`Carregando categorias para função ${funcaoId}...`);
                    const response = await fetch(`/api/Categorias?funcaoId=${funcaoId}`);

                    if (!response.ok) {
                        throw new Error(`Erro ${response.status}: ${response.statusText}`);
                    }

                    const data = await response.json();
                    console.log('Categorias carregadas:', data);

                    // Preencher categorias
                    subOpcoesSelect.innerHTML = '<option value="">Selecione uma categoria</option>';

                    data.forEach(categoria => {
                        const option = document.createElement('option');
                        // Ajuste baseado na estrutura real da sua tabela SGSI_CATEGORIAS
                        option.value = categoria.id || categoria.ID;
                        option.textContent = `${categoria.codigo || categoria.CODIGO || ''} - ${categoria.nome || categoria.NOME}`;

                        subOpcoesSelect.appendChild(option);
                    });

                    subOpcoesSelect.disabled = false;
                    subOpcoesContainer.classList.remove('hidden');
                    subOpcoesContainer.classList.add('visible');
                    updateBreadcrumb(2);

                } catch (error) {
                    console.error('Erro ao carregar categorias:', error);
                    subOpcoesSelect.innerHTML = '<option value="">Erro ao carregar categorias</option>';
                    subOpcoesSelect.disabled = false;
                }
            }

            // Carregar subcategorias baseadas na categoria selecionada
            async function carregarSubcategorias(categoriaId) {
                const subCatContainer = document.getElementById('subCatContainer');
                const subCatSelect = document.getElementById('subCatOpcoes');
                const infoContainer = document.getElementById('infoContainer');

                // Limpar seleções anteriores
                subCatSelect.innerHTML = '<option value="">Carregando subcategorias...</option>';
                subCatSelect.disabled = true;
                infoContainer.classList.add('hidden');

                if (!categoriaId) {
                    subCatContainer.classList.add('hidden');
                    updateBreadcrumb(2);
                    return;
                }

                try {
                    console.log(`Carregando subcategorias para categoria ${categoriaId}...`);
                    const response = await fetch(`/api/Subcategorias?categoriaId=${categoriaId}`);

                    if (!response.ok) {
                        throw new Error(`Erro ${response.status}: ${response.statusText}`);
                    }

                    const data = await response.json();
                    console.log('Subcategorias carregadas:', data);

                    // Preencher subcategorias
                    subCatSelect.innerHTML = '<option value="">Selecione uma Subcategoria</option>';

                    data.forEach(subcategoria => {
                        const option = document.createElement('option');
                        option.value = subcategoria.id || subcategoria.ID || subcategoria.ID_SUBCATEGORIA;
                        option.textContent = `${subcategoria.codigo || subcategoria.CODIGO || ''} - ${subcategoria.subcategoria || subcategoria.SUBCATEGORIA || subcategoria.descricao || subcategoria.DESCRICAO}`;
                        option.setAttribute('data-descricao', subcategoria.descricao || subcategoria.DESCRICAO || '');

                        subCatSelect.appendChild(option);
                    });

                    subCatSelect.disabled = false;
                    subCatContainer.classList.remove('hidden');
                    subCatContainer.classList.add('visible');
                    updateBreadcrumb(3);

                } catch (error) {
                    console.error('Erro ao carregar subcategorias:', error);
                    subCatSelect.innerHTML = '<option value="">Erro ao carregar subcategorias</option>';
                    subCatSelect.disabled = false;
                }
            }

            // Carregar informações da subcategoria selecionada
            async function carregarInformacoes(subcategoriaId) {
                const infoContainer = document.getElementById('infoContainer');
                const infoTextarea = document.getElementById('infoTextarea');

                if (!subcategoriaId) {
                    infoContainer.classList.add('hidden');
                    return;
                }

                try {
                    console.log(`Carregando informações para subcategoria ${subcategoriaId}...`);
                    const response = await fetch(`/api/Subcategories/${subcategoriaId}`);

                    if (!response.ok) {
                        throw new Error(`Erro ${response.status}: ${response.statusText}`);
                    }

                    const subcategoria = await response.json();
                    console.log('Informações carregadas:', subcategoria);

                    // Buscar informações adicionais se necessário
                    const informacoesCompletas = await carregarInformacoesCompletas(subcategoriaId);

                    // Montar o texto com todas as informações
                    const textoInfo = montarTextoInformacoes(subcategoria, informacoesCompletas);

                    infoTextarea.value = `${subcategoria.codigo || subcategoria.CODIGO || ''} - ${subcategoria.subcategoria || subcategoria.SUBCATEGORIA || subcategoria.descricao || subcategoria.DESCRICAO}`;
                    infoContainer.classList.remove('hidden');
                    infoContainer.classList.add('visible');


                } catch (error) {
                    console.error('Erro ao carregar informações:', error);

                    // Tentar pegar a descrição do option selecionado
                    const subCatSelect = document.getElementById('subCatOpcoes');
                    const selectedOption = subCatSelect.options[subCatSelect.selectedIndex];
                    const descricao = selectedOption ? selectedOption.getAttribute('data-descricao') : '';

                    infoTextarea.value = descricao || "Informações não disponíveis no momento.";
                    infoContainer.classList.remove('hidden');
                    infoContainer.classList.add('visible');
                }
            }

            // Função para carregar informações completas (controles, etc.)
            async function carregarInformacoesCompletas(subcategoriaId) {
                try {
                    // Buscar controles relacionados a esta subcategoria
                    const response = await fetch(`/api/Controles?subcategoriaId=${subcategoriaId}`);
                    if (response.ok) {
                        return await response.json();
                    }
                } catch (error) {
                    console.error('Erro ao carregar controles:', error);
                }
                return null;
            }

            // Montar texto completo das informações
            function montarTextoInformacoes(subcategoria, controles) {
                let texto = '';

                // Informações básicas da subcategoria
                texto += `SUBCATEGORIA: ${subcategoria.descricao || subcategoria.DESCRICAO || 'N/A'}\n\n`;
                texto += `CÓDIGO: ${subcategoria.codigo || subcategoria.CODIGO || subcategoria.id || 'N/A'}\n`;
                texto += `ID: ${subcategoria.id || subcategoria.ID}\n\n`;

                // Adicionar controles se existirem
                if (controles && controles.length > 0) {
                    texto += `CONTROLES RELACIONADOS:\n`;
                    texto += '─'.repeat(50) + '\n';

                    controles.forEach(controle => {
                        texto += `• ${controle.controle || controle.CONTROLE || 'Controle'}`;
                        if (controle.codigo || controle.CODIGO) {
                            texto += ` (${controle.codigo || controle.CODIGO})`;
                        }
                        texto += '\n';
                    });
                } else {
                    texto += `CONTROLES: Nenhum controle específico cadastrado.\n`;
                }

                return texto;
            }

            // Atualizar breadcrumb
            function updateBreadcrumb(step) {
                const breadcrumbItems = document.querySelectorAll('.breadcrumb div');
                breadcrumbItems.forEach(item => item.classList.remove('active'));

                if (step >= 1) breadcrumbItems[0].classList.add('active');
                if (step >= 2) breadcrumbItems[1].classList.add('active');
                if (step >= 3) breadcrumbItems[2].classList.add('active');
            }
        </script>
    </div>
</body>

</html>