<!DOCTYPE html>
<html lang="pt-br">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NIST CSF - Seleção de Subcategorias</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            padding: 20px;
            color: #2c3e50;
        }

        .container {
            max-width: 1000px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
        }

        h1 {
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.2em;
            font-weight: 600;
            color: #2c3e50;
        }

        .breadcrumb {
            display: flex;
            margin-bottom: 25px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 10px;
            font-size: 1.1em;
        }

        .breadcrumb div {
            margin-right: 10px;
            padding-right: 15px;
            position: relative;
        }

        .breadcrumb div:not(:last-child)::after {
            content: "›";
            position: absolute;
            right: 0;
            color: #7f8c8d;
        }

        .breadcrumb .active {
            font-weight: bold;
            color: #3498db;
        }

        .combo-container {
            margin-bottom: 25px;
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            border-left: 4px solid #3498db;
        }

        label {
            display: block;
            margin-bottom: 10px;
            font-weight: bold;
            color: #2c3e50;
            font-size: 1.1em;
        }

        select {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
            background-color: white;
            transition: border-color 0.3s;
        }

        select:focus {
            border-color: #3498db;
            outline: none;
        }

        .hidden {
            display: none;
        }

        .visible {
            display: block;
            animation: fadeIn 0.5s ease-in-out;
        }

        keyframes
        fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .subcategorias-container {
            margin-top: 20px;
        }

        .subcategoria-topic {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            border-left: 4px solid #3498db;
            margin-bottom: 20px;
        }

        .subcategoria-topic h3 {
            color: #2c3e50;
            margin-bottom: 15px;
            font-size: 1.3em;
            display: flex;
            align-items: center;
        }

        .subcategoria-topic h3::before {
            content: "•";
            margin-right: 10px;
            color: #3498db;
            font-size: 1.5em;
        }

        .options {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .option-label {
            display: flex;
            align-items: center;
            padding: 12px 15px;
            background: white;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .option-label:hover {
            border-color: #3498db;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .option-label.selected {
            border-color: #27ae60;
            background-color: #e8f5e9;
        }

        .option-checkbox {
            margin-right: 12px;
            transform: scale(1.3);
            accent-color: #27ae60;
        }

        .subcategoria-info {
            display: flex;
            flex-direction: column;
            flex: 1;
        }

        .subcategoria-codigo {
            font-weight: bold;
            color: #2c3e50;
            font-size: 1.1em;
            margin-bottom: 5px;
        }

        .subcategoria-descricao {
            color: #7f8c8d;
            font-size: 0.95em;
        }

        .navigation {
            text-align: center;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #eee;
        }

        .btn-excluir {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
            color: white;
            padding: 15px 40px;
            border: none;
            border-radius: 50px;
            font-size: 1.2em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(231, 76, 60, 0.3);
        }

        .btn-excluir:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(231, 76, 60, 0.4);
        }

        .btn-avancar {
            background: linear-gradient(135deg, #27ae60, #2ecc71);
            color: white;
            padding: 15px 40px;
            border: none;
            border-radius: 50px;
            font-size: 1.2em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(39, 174, 96, 0.3);
        }

        .btn-avancar:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(39, 174, 96, 0.4);
        }

        .btn-avancar:disabled {
            background: #95a5a6;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .selected-count {
            text-align: center;
            margin-bottom: 25px;
            font-size: 1.1em;
            color: #2c3e50;
            padding: 12px;
            background: #e8f4fc;
            border-radius: 8px;
            font-weight: 500;
        }

        .global-selected-count {
            text-align: center;
            margin: 20px 0;
            padding: 15px;
            background: #e8f5e9;
            border-radius: 8px;
            border-left: 4px solid #27ae60;
            font-weight: bold;
        }

        .button-group {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 15px;
        }

        .btn-desmarcar {
            background: linear-gradient(135deg, #f39c12, #f1c40f);
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 50px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(243, 156, 18, 0.3);
        }

        .btn-desmarcar:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(243, 156, 18, 0.4);
        }

        .loading {
            color: #666;
            font-style: italic;
        }

        .error {
            color: #e74c3c;
            background: #ffe6e6;
            padding: 10px;
            border-radius: 5px;
            margin-top: 10px;
        }
    </style>
</head>

<body>
    <div class="container">
        <h1>NIST CSF - Seleção de Subcategorias</h1>

        <div class="breadcrumb">
            <div class="active">Função</div>
            <div>Categoria</div>
            <div>Subcategorias</div>
        </div>

        <div class="combo-container">
            <label for="opcoesPrincipais">Selecione uma função:</label>
            <select id="opcoesPrincipais" onchange="carregarCategorias(this.value)" disabled>
                <option value="">Carregando funções...</option>
            </select>
        </div>

        <div id="categoriasContainer" class="hidden">
            <div class="combo-container">
                <label for="categorias">Selecione uma categoria:</label>
                <select id="categorias" onchange="carregarSubcategorias(this.value)" disabled>
                    <option value="">Selecione uma categoria</option>
                </select>
            </div>
        </div>

        <div id="subcategoriasContainer" class="hidden">
            <div class="global-selected-count" id="globalSelectedCount">
                Total de 0 subcategorias selecionadas em todas as categorias
            </div>

            <div class="selected-count" id="selectedCount">
                Nenhuma subcategoria selecionada nesta categoria
            </div>

            <div id="subcategoriasList" class="subcategorias-container">
                <!-- As subcategorias serão inseridas aqui via JavaScript -->
            </div>

            <div class="navigation button-group">
                <button class="btn-excluir" id="btnExcluir" onclick="desmarcarTudo()">
                    Excluir seleções
                </button>

                <button class="btn-desmarcar" onclick="desmarcarTodasSubcategorias()">
                    Desmarcar subcategorias
                </button>

                <button class="btn-avancar" id="btnAvancar" onclick="avancarParaAlteracoes()">
                    Avançar para Alterações
                </button>
            </div>
        </div>

        <script>
            // Variáveis globais para armazenar dados do banco
            let funcoesData = [];
            let categoriasData = [];
            let subcategoriasData = [];

            // Cache para informações de função e categoria
            let funcoesCache = {};
            let categoriasCache = {};

            // Variáveis para controle de seleções
            let selectedFunction = "";
            let selectedCategory = "";
            let selectedSubcategories = {};

            // Inicialização quando a página carrega
            document.addEventListener('DOMContentLoaded', function () {
                carregarFuncoes();
                loadSelections();
                updateGlobalSelectionCount();
            });

            // Carregar funções do banco
            async function carregarFuncoes() {
                try {
                    console.log('Carregando funções...');
                    const response = await fetch('/api/Funcoes');

                    if (!response.ok) {
                        throw new Error(`Erro ${response.status}: ${response.statusText}`);
                    }

                    const data = await response.json();
                    console.log('Funções carregadas:', data);

                    funcoesData = data;
                    // Popular cache de funções
                    funcoesData.forEach(funcao => {
                        funcoesCache[funcao.id || funcao.ID] = funcao;
                    });
                    preencherFuncoes();

                } catch (error) {
                    console.error('Erro ao carregar funções:', error);
                    document.getElementById('opcoesPrincipais').innerHTML = '<option value="">Erro ao carregar funções</option>';
                    document.getElementById('opcoesPrincipais').disabled = false;
                }
            }

            // Preencher dropdown de funções
            function preencherFuncoes() {
                const select = document.getElementById('opcoesPrincipais');
                select.innerHTML = '<option value="">Selecione uma função</option>';

                funcoesData.forEach(funcao => {
                    const option = document.createElement('option');
                    option.value = funcao.id || funcao.ID;
                    option.textContent = `${funcao.codigo || funcao.CODIGO || ''} - ${funcao.nome || funcao.NOME || funcao.descricao || funcao.DESCRICAO}`;
                    select.appendChild(option);
                });

                select.disabled = false;
                updateBreadcrumb(1);
            }

            // Carregar categorias baseadas na função selecionada
            async function carregarCategorias(funcaoId) {
                const categoriasContainer = document.getElementById('categoriasContainer');
                const categoriasSelect = document.getElementById('categorias');
                const subcategoriasContainer = document.getElementById('subcategoriasContainer');

                // Limpar seleções anteriores
                categoriasSelect.innerHTML = '<option value="">Carregando categorias...</option>';
                categoriasSelect.disabled = true;
                subcategoriasContainer.classList.add('hidden');

                selectedFunction = funcaoId;

                if (!funcaoId) {
                    categoriasContainer.classList.add('hidden');
                    updateBreadcrumb(1);
                    return;
                }

                try {
                    console.log(`Carregando categorias para função ${funcaoId}...`);
                    const response = await fetch(`/api/Categorias?funcaoId=${funcaoId}`);

                    if (!response.ok) {
                        throw new Error(`Erro ${response.status}: ${response.statusText}`);
                    }

                    const data = await response.json();
                    console.log('Categorias carregadas:', data);

                    // Limpar cache de categorias para esta função
                    Object.keys(categoriasCache).forEach(key => {
                        if (categoriasCache[key].funcaoId === funcaoId) {
                            delete categoriasCache[key];
                        }
                    });

                    // Preencher categorias e popular cache
                    categoriasSelect.innerHTML = '<option value="">Selecione uma categoria</option>';

                    data.forEach(categoria => {
                        const option = document.createElement('option');
                        option.value = categoria.id || categoria.ID;
                        option.textContent = `${categoria.codigo || categoria.CODIGO || ''} - ${categoria.nome || categoria.NOME}`;
                        categoriasSelect.appendChild(option);

                        // Armazenar no cache
                        categoriasCache[categoria.id || categoria.ID] = {
                            ...categoria,
                            funcaoId: funcaoId
                        };
                    });

                    categoriasSelect.disabled = false;
                    categoriasContainer.classList.remove('hidden');
                    categoriasContainer.classList.add('visible');
                    updateBreadcrumb(2);

                    // Inicializar seleções para esta função se não existir
                    if (!selectedSubcategories[funcaoId]) {
                        selectedSubcategories[funcaoId] = {};
                    }

                } catch (error) {
                    console.error('Erro ao carregar categorias:', error);
                    categoriasSelect.innerHTML = '<option value="">Erro ao carregar categorias</option>';
                    categoriasSelect.disabled = false;
                }
            }

            // Carregar subcategorias baseadas na categoria selecionada
            async function carregarSubcategorias(categoriaId) {
                const subcategoriasContainer = document.getElementById('subcategoriasContainer');
                const subcategoriasList = document.getElementById('subcategoriasList');

                selectedCategory = categoriaId;

                // Limpar seleções anteriores
                subcategoriasList.innerHTML = '';

                // Atualizar breadcrumb
                updateBreadcrumb(2);

                if (!categoriaId) {
                    subcategoriasContainer.classList.add('hidden');
                    return;
                }

                try {
                    console.log(`Carregando subcategorias para categoria ${categoriaId}...`);
                    const response = await fetch(`/api/Subcategorias?categoriaId=${categoriaId}`);

                    if (!response.ok) {
                        throw new Error(`Erro ${response.status}: ${response.statusText}`);
                    }

                    const data = await response.json();
                    console.log('Subcategorias carregadas:', data);

                    // Inicializar seleções para esta categoria se não existir
                    if (!selectedSubcategories[selectedFunction][categoriaId]) {
                        selectedSubcategories[selectedFunction][categoriaId] = [];
                    }

                    // Buscar informações da função e categoria para montar o código completo
                    const funcaoInfo = funcoesCache[selectedFunction];
                    const categoriaInfo = categoriasCache[categoriaId];

                    // Criar tópico para as subcategorias
                    const topicDiv = document.createElement('div');
                    topicDiv.className = 'subcategoria-topic';

                    const topicTitle = document.createElement('h3');
                    const categoriaNome = document.getElementById('categorias').options[document.getElementById('categorias').selectedIndex].textContent;
                    topicTitle.textContent = categoriaNome;
                    topicDiv.appendChild(topicTitle);

                    const optionsDiv = document.createElement('div');
                    optionsDiv.className = 'options';

                    // Preencher as subcategorias como checkboxes
                    data.forEach(subcategoria => {
                        const label = document.createElement('label');
                        label.className = 'option-label';

                        const checkbox = document.createElement('input');
                        checkbox.type = 'checkbox';
                        checkbox.className = 'option-checkbox';
                        checkbox.value = subcategoria.id || subcategoria.ID;

                        // Verificar se esta subcategoria já foi selecionada anteriormente
                        if (selectedSubcategories[selectedFunction] &&
                            selectedSubcategories[selectedFunction][categoriaId] &&
                            selectedSubcategories[selectedFunction][categoriaId].includes(subcategoria.id || subcategoria.ID)) {
                            checkbox.checked = true;
                            label.classList.add('selected');
                        }

                        // Criar container para as informações da subcategoria
                        const infoDiv = document.createElement('div');
                        infoDiv.className = 'subcategoria-info';

                        // Montar código completo: função.categoria-numero (ex: DE.CM-01)
                        const codigoFuncao = funcaoInfo?.codigo || funcaoInfo?.CODIGO || '';
                        const codigoCategoria = categoriaInfo?.codigo || categoriaInfo?.CODIGO || '';
                        const codigoSubcategoria = subcategoria.codigo || subcategoria.CODIGO || '';

                        // Formatar o código completo
                        let codigoCompleto = '';
                        if (codigoFuncao && codigoCategoria) {
                            // Se já tem o código completo na subcategoria, usa ele
                            if (codigoSubcategoria && codigoSubcategoria.includes('.')) {
                                codigoCompleto = codigoSubcategoria;
                            } else {
                                // Monta o código: função.categoria-numero
                                codigoCompleto = `${codigoFuncao}.${codigoCategoria}-${codigoSubcategoria}${subcategoria.subcategoria || subcategoria.SUBCATEGORIA}`;
                            }
                        } else {
                            codigoCompleto = codigoSubcategoria || `SC-${subcategoria.id || subcategoria.ID}`;
                        }

                        const codigoSpan = document.createElement('span');
                        codigoSpan.className = 'subcategoria-codigo';
                        codigoSpan.textContent = codigoCompleto;

                        const descricaoSpan = document.createElement('span');
                        descricaoSpan.className = 'subcategoria-descricao';
                        descricaoSpan.textContent = subcategoria.descricao || subcategoria.DESCRICAO || subcategoria.descricao || subcategoria.DESCRICAO || '';

                        infoDiv.appendChild(codigoSpan);
                        infoDiv.appendChild(descricaoSpan);

                        label.appendChild(checkbox);
                        label.appendChild(infoDiv);
                        optionsDiv.appendChild(label);

                        // Adicionar evento para atualizar contagem de seleção
                        checkbox.addEventListener('change', function () {
                            updateSelection(this, subcategoria.id || subcategoria.ID);
                        });
                    });

                    topicDiv.appendChild(optionsDiv);
                    subcategoriasList.appendChild(topicDiv);

                    // Mostrar o container
                    subcategoriasContainer.classList.remove('hidden');
                    subcategoriasContainer.classList.add('visible');

                    // Inicializar a contagem de seleção
                    updateLocalSelectionCount();
                    updateGlobalSelectionCount();

                } catch (error) {
                    console.error('Erro ao carregar subcategorias:', error);
                    subcategoriasList.innerHTML = '<div class="error">Erro ao carregar subcategorias</div>';
                }
            }

            // Funções de gerenciamento de seleções
            function initializeSelections() {
                selectedSubcategories = {};
            }

            function loadSelections() {
                const savedSelections = localStorage.getItem('nistSelections');
                if (savedSelections) {
                    selectedSubcategories = JSON.parse(savedSelections);
                } else {
                    initializeSelections();
                }
            }

            function saveSelections() {
                localStorage.setItem('nistSelections', JSON.stringify(selectedSubcategories));
            }

            function updateSelection(checkbox, subcategoriaId) {
                const label = checkbox.closest('.option-label');

                if (checkbox.checked) {
                    label.classList.add('selected');
                    // Adicionar à lista de seleções
                    if (!selectedSubcategories[selectedFunction][selectedCategory].includes(subcategoriaId)) {
                        selectedSubcategories[selectedFunction][selectedCategory].push(subcategoriaId);
                    }
                } else {
                    label.classList.remove('selected');
                    // Remover da lista de seleções
                    const index = selectedSubcategories[selectedFunction][selectedCategory].indexOf(subcategoriaId);
                    if (index > -1) {
                        selectedSubcategories[selectedFunction][selectedCategory].splice(index, 1);
                    }
                }

                // Atualizar contadores
                updateLocalSelectionCount();
                updateGlobalSelectionCount();

                // Salvar seleções
                saveSelections();
            }

            function updateLocalSelectionCount() {
                const selectedCount = document.getElementById('selectedCount');
                let count = 0;

                if (selectedSubcategories[selectedFunction] && selectedSubcategories[selectedFunction][selectedCategory]) {
                    count = selectedSubcategories[selectedFunction][selectedCategory].length;
                }

                selectedCount.textContent =
                    count === 0 ? 'Nenhuma subcategoria selecionada nesta categoria' :
                        `${count} subcategoria${count !== 1 ? 's' : ''} selecionada${count !== 1 ? 's' : ''} nesta categoria`;
            }

            function updateGlobalSelectionCount() {
                const globalSelectedCount = document.getElementById('globalSelectedCount');
                let total = 0;

                // Contar todas as subcategorias selecionadas em todas as funções e categorias
                for (const func in selectedSubcategories) {
                    for (const categoria in selectedSubcategories[func]) {
                        total += selectedSubcategories[func][categoria].length;
                    }
                }

                globalSelectedCount.textContent = `Total de ${total} subcategoria${total !== 1 ? 's' : ''} selecionada${total !== 1 ? 's' : ''} em todas as categorias`;
            }

            function updateBreadcrumb(step) {
                const breadcrumbItems = document.querySelectorAll('.breadcrumb div');
                breadcrumbItems.forEach(item => item.classList.remove('active'));

                if (step >= 1) breadcrumbItems[0].classList.add('active');
                if (step >= 2) breadcrumbItems[1].classList.add('active');
                if (step >= 3) breadcrumbItems[2].classList.add('active');
            }

            function desmarcarTodasSubcategorias() {
                const checkboxes = document.querySelectorAll('#subcategoriasList .option-checkbox');

                checkboxes.forEach(checkbox => {
                    if (checkbox.checked) {
                        checkbox.checked = false;
                        checkbox.closest('.option-label').classList.remove('selected');
                    }
                });

                // Limpa a seleção da categoria atual
                if (selectedSubcategories[selectedFunction] &&
                    selectedSubcategories[selectedFunction][selectedCategory]) {
                    selectedSubcategories[selectedFunction][selectedCategory] = [];
                }

                updateLocalSelectionCount();
                updateGlobalSelectionCount();
                saveSelections();
            }

            function desmarcarTudo() {
                // Resetar selects
                document.getElementById('opcoesPrincipais').selectedIndex = 0;
                document.getElementById('categorias').selectedIndex = 0;

                // Esconder containers
                document.getElementById('categoriasContainer').classList.add('hidden');
                document.getElementById('subcategoriasContainer').classList.add('hidden');

                // Limpar o objeto de seleção
                initializeSelections();
                saveSelections();

                // Atualizar contadores
                updateLocalSelectionCount();
                updateGlobalSelectionCount();

                // Atualizar breadcrumb
                updateBreadcrumb(1);

                alert("Todas as seleções foram resetadas!");
            }

            function avancarParaAlteracoes() {
                // Salvar no localStorage
                localStorage.setItem('selectedFunction', selectedFunction);
                localStorage.setItem('selectedCategory', selectedCategory);
                localStorage.setItem('selectedSubcategories', JSON.stringify(selectedSubcategories));

                // Redirecionar para a página de alterações
                window.location.href = '/Home/Governanca';
            }
        </script>
    </div>
</body>

</html>